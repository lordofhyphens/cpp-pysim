# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_EventSim', [dirname(__file__)])
        except ImportError:
            import _EventSim
            return _EventSim
        if fp is not None:
            try:
                _mod = imp.load_module('_EventSim', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _EventSim = swig_import_helper()
    del swig_import_helper
else:
    import _EventSim
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _EventSim.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _EventSim.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _EventSim.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _EventSim.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _EventSim.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _EventSim.SwigPyIterator_equal(self, x)

    def copy(self):
        return _EventSim.SwigPyIterator_copy(self)

    def next(self):
        return _EventSim.SwigPyIterator_next(self)

    def __next__(self):
        return _EventSim.SwigPyIterator___next__(self)

    def previous(self):
        return _EventSim.SwigPyIterator_previous(self)

    def advance(self, n):
        return _EventSim.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _EventSim.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _EventSim.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _EventSim.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _EventSim.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _EventSim.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _EventSim.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _EventSim.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Gate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Gate, name)
    __repr__ = _swig_repr
    gate_t_BSC = _EventSim.Gate_gate_t_BSC
    gate_t_TP = _EventSim.Gate_gate_t_TP
    gate_t_INPUT = _EventSim.Gate_gate_t_INPUT
    gate_t_AND = _EventSim.Gate_gate_t_AND
    gate_t_NAND = _EventSim.Gate_gate_t_NAND
    gate_t_OR = _EventSim.Gate_gate_t_OR
    gate_t_NOR = _EventSim.Gate_gate_t_NOR
    gate_t_XOR = _EventSim.Gate_gate_t_XOR
    gate_t_XNOR = _EventSim.Gate_gate_t_XNOR
    gate_t_BUFF = _EventSim.Gate_gate_t_BUFF
    gate_t_NOT = _EventSim.Gate_gate_t_NOT
    gate_t_OUTPUT = _EventSim.Gate_gate_t_OUTPUT
    gate_t_DUMMY = _EventSim.Gate_gate_t_DUMMY
    __swig_getmethods__["function"] = _EventSim.Gate_function_get
    if _newclass:
        function = _swig_property(_EventSim.Gate_function_get)
    __swig_getmethods__["name"] = _EventSim.Gate_name_get
    if _newclass:
        name = _swig_property(_EventSim.Gate_name_get)
    __swig_getmethods__["delay"] = _EventSim.Gate_delay_get
    if _newclass:
        delay = _swig_property(_EventSim.Gate_delay_get)
    __swig_setmethods__["fanin"] = _EventSim.Gate_fanin_set
    __swig_getmethods__["fanin"] = _EventSim.Gate_fanin_get
    if _newclass:
        fanin = _swig_property(_EventSim.Gate_fanin_get, _EventSim.Gate_fanin_set)
    __swig_setmethods__["fanout"] = _EventSim.Gate_fanout_set
    __swig_getmethods__["fanout"] = _EventSim.Gate_fanout_get
    if _newclass:
        fanout = _swig_property(_EventSim.Gate_fanout_get, _EventSim.Gate_fanout_set)
    __swig_setmethods__["output"] = _EventSim.Gate_output_set
    __swig_getmethods__["output"] = _EventSim.Gate_output_get
    if _newclass:
        output = _swig_property(_EventSim.Gate_output_get, _EventSim.Gate_output_set)
    __swig_setmethods__["primary_output"] = _EventSim.Gate_primary_output_set
    __swig_getmethods__["primary_output"] = _EventSim.Gate_primary_output_get
    if _newclass:
        primary_output = _swig_property(_EventSim.Gate_primary_output_get, _EventSim.Gate_primary_output_set)

    def __init__(self, *args):
        this = _EventSim.new_Gate(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def nfin(self):
        return _EventSim.Gate_nfin(self)

    def nfot(self):
        return _EventSim.Gate_nfot(self)
    __swig_destroy__ = _EventSim.delete_Gate
    __del__ = lambda self: None
Gate_swigregister = _EventSim.Gate_swigregister
Gate_swigregister(Gate)

class EventSim(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventSim, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventSim, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bist"] = _EventSim.EventSim_bist_set
    __swig_getmethods__["bist"] = _EventSim.EventSim_bist_get
    if _newclass:
        bist = _swig_property(_EventSim.EventSim_bist_get, _EventSim.EventSim_bist_set)
    __swig_setmethods__["ckt"] = _EventSim.EventSim_ckt_set
    __swig_getmethods__["ckt"] = _EventSim.EventSim_ckt_get
    if _newclass:
        ckt = _swig_property(_EventSim.EventSim_ckt_get, _EventSim.EventSim_ckt_set)
    __swig_setmethods__["inputs"] = _EventSim.EventSim_inputs_set
    __swig_getmethods__["inputs"] = _EventSim.EventSim_inputs_get
    if _newclass:
        inputs = _swig_property(_EventSim.EventSim_inputs_get, _EventSim.EventSim_inputs_set)
    __swig_setmethods__["results"] = _EventSim.EventSim_results_set
    __swig_getmethods__["results"] = _EventSim.EventSim_results_get
    if _newclass:
        results = _swig_property(_EventSim.EventSim_results_get, _EventSim.EventSim_results_set)
    __swig_setmethods__["cycles"] = _EventSim.EventSim_cycles_set
    __swig_getmethods__["cycles"] = _EventSim.EventSim_cycles_get
    if _newclass:
        cycles = _swig_property(_EventSim.EventSim_cycles_get, _EventSim.EventSim_cycles_set)
    __swig_setmethods__["events"] = _EventSim.EventSim_events_set
    __swig_getmethods__["events"] = _EventSim.EventSim_events_get
    if _newclass:
        events = _swig_property(_EventSim.EventSim_events_get, _EventSim.EventSim_events_set)

    def add_to_inputs(self, c, name, value):
        return _EventSim.EventSim_add_to_inputs(self, c, name, value)

    def add_gate(self, g):
        return _EventSim.EventSim_add_gate(self, g)

    def run(self):
        return _EventSim.EventSim_run(self)

    def __init__(self):
        this = _EventSim.new_EventSim()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _EventSim.delete_EventSim
    __del__ = lambda self: None
EventSim_swigregister = _EventSim.EventSim_swigregister
EventSim_swigregister(EventSim)

# This file is compatible with both classic and new-style classes.


